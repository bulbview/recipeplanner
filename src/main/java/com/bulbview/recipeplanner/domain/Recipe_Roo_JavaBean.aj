// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.bulbview.recipeplanner.domain;

import com.bulbview.recipeplanner.domain.IngredientQuantity;
import com.google.appengine.api.datastore.Key;
import com.google.appengine.api.datastore.KeyFactory;
import java.lang.String;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import javax.persistence.OneToMany;
import javax.persistence.Transient;

privileged aspect Recipe_Roo_JavaBean {
    
    declare @field: * Recipe.ingredients: -@OneToMany;
    
    declare @field: * Recipe.ingredients: @Transient;
    
    private Set<Key> Recipe.ingredientsKeys = new HashSet<Key>();
    
    public String Recipe.getName() {
        return this.name;
    }
    
    public void Recipe.setName(String name) {
        this.name = name;
    }
    
    public Set<IngredientQuantity> Recipe.getIngredients() {
        Set<com.bulbview.recipeplanner.domain.IngredientQuantity> localIngredients = new HashSet<com.bulbview.recipeplanner.domain.IngredientQuantity>();
        for (Key key : ingredientsKeys) {
            IngredientQuantity entity = IngredientQuantity.findIngredientQuantity(key.getId());
            if (entity != null) {
                localIngredients.add(entity);
            }
        }
        this.ingredients = localIngredients;
        return localIngredients;
    }
    
    public void Recipe.setIngredients(Set<IngredientQuantity> ingredients) {
        Set<com.bulbview.recipeplanner.domain.IngredientQuantity> localIngredients = new HashSet<com.bulbview.recipeplanner.domain.IngredientQuantity>();
        List<Long> longIds = new ArrayList<Long>();
        for (Key key : ingredientsKeys) {
            if (!longIds.contains(key.getId())) {
                longIds.add(key.getId());
            }
        }
        for (IngredientQuantity entity : ingredients) {
            if (!longIds.contains(entity.getId())) {
                longIds.add(entity.getId());
                ingredientsKeys.add(KeyFactory.createKey(IngredientQuantity.class.getName(), entity.getId()));
            }
            localIngredients.add(entity);
        }
        this.ingredients = localIngredients;
    }
    
}
